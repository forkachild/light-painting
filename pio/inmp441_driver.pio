; High optimized PIO program to receive audio samples from I2S only from left channel.
; Shifts two 0 bits followed by 24-bits of sample and skips the right channel.
;
; I love PIO

.program inmp441
.side_set 2

.define din_cycles      (25 - 1)
.define pad_cycles      (6 - 1)
.define skip_cycles     (31 - 1)

.define public required_clock   6144000

; First two bits are dummy(=0) + 24 bits
.define public bits_in_per_word    26

;                           WS    SCK
;                             \  /
dummy:;                         ||
    in null, 1          side 0b11   ; (SAMPLE NULL BIT) Block on ISR until 
;                              ||   ; RX FIFO accomodates space
; skip loop end                ||
; data loop start              ||
left:;                         ||
    set x, din_cycles   side 0b00   ; We begin with the left channel
left_loop:;                    ||
    in pins, 1          side 0b01   ; (SAMPLE BITS 0 to 24 LEFT) Sample a data bit on rising-edge
    jmp x--, left_loop  side 0b00   ; Loop until x == 1 (25 times)
; data loop end                ||
; pad loop start               ||
l3:;                           ||
    set x, pad_cycles   side 0b01   ; (PAD BIT 25 LEFT) Another cycle
l4:;                           ||
    nop                 side 0b00   ; Skip bit loop
    jmp x--, l4         side 0b01   ; (PAD BITS 26 to 31 LEFT) Loop until x == 1 (6 times)
; pad loop end                 ||
; skip loop start              ||
l5:;                           ||
    set x, skip_cycles  side 0b10   ; Move to right channel, which we will entirely skip
l6:;                           ||
    nop                 side 0b11   ; (SKIP BITS 0 to 30 RIGHT)
    jmp x--, l6         side 0b10   
;                              ||
;                             /  \
;                           WS    SCK

% c-sdk {
#include "hardware/clocks.h"
#include "hardware/gpio.h"

static inline void inmp441_program_init(PIO pio, uint sm, uint offset,
                                            uint sck_pin, uint ws_pin,
                                            uint data_pin) {
    pio_sm_set_pindirs_with_mask(
        pio, sm, (1u << sck_pin) | (1u << ws_pin) | (0u << data_pin),
        (1u << sck_pin) | (1u << ws_pin) | (1u << data_pin));
    pio_gpio_init(pio, sck_pin);
    pio_gpio_init(pio, ws_pin);

    pio_sm_config c = inmp441_program_get_default_config(offset);
    
    sm_config_set_clkdiv(&c, (float)clock_get_hz(clk_sys) / inmp441_required_clock);
    sm_config_set_in_pins(&c, data_pin);
    sm_config_set_sideset_pins(&c, sck_pin);
    sm_config_set_in_shift(&c, false, true, inmp441_bits_in_per_word);
    sm_config_set_fifo_join(&c, PIO_FIFO_JOIN_RX);

    gpio_set_drive_strength(sck_pin, GPIO_DRIVE_STRENGTH_12MA);
    gpio_set_slew_rate(sck_pin, GPIO_SLEW_RATE_FAST);
    gpio_set_pulls(data_pin, false, true);
    gpio_set_input_hysteresis_enabled(data_pin, true);
    hw_set_bits(&pio->input_sync_bypass, 1u << data_pin);

    pio_sm_init(pio, sm, offset, &c);
    pio_sm_set_enabled(pio, sm, true);
}

static inline void inmp441_program_deinit(PIO pio, uint sm) {
    pio_sm_set_enabled(pio, sm, false);
    pio_sm_unclaim(pio, sm);
}

%}