.program ws2812
.side_set 1

; Time for instruction = 0.3us = 300ns

.define public baud 10000000

bitloop:
    out x  1       side 0b0 [1] ; 0.6us LO => Read next bit, also completes LO part
    jmp !x tx_zero side 0b1     ; 0.3us HI => Decide jumping to transmitting a "0" or "1"
tx_one:
    jmp bitloop    side 0b1     ; 0.3us HI => Modulation = (0.3us + 0.3us) HI + (0.3us) LO
tx_zero:
    nop            side 0b0     ; 0.3us LO => Modulation = (0.3us) HI + (0.3us + 0.3us) LO

% c-sdk {
#include "hardware/clocks.h"
#include <stdio.h>

static inline void ws2812_program_init(PIO pio, uint sm, uint offset, uint pin) {
    pio_gpio_init(pio, pin);
    pio_sm_set_consecutive_pindirs(pio, sm, pin, 1, true);

    pio_sm_config c = ws2812_program_get_default_config(offset);
    sm_config_set_sideset_pins(&c, pin);
    sm_config_set_out_shift(&c, false, true, 24);
    sm_config_set_fifo_join(&c, PIO_FIFO_JOIN_TX);
    sm_config_set_clkdiv(&c, 3.f * clock_get_hz(clk_sys) / ws2812_baud);

    pio_sm_init(pio, sm, offset, &c);
    pio_sm_set_enabled(pio, sm, true);
}

static inline void ws2812_program_deinit(PIO pio, uint sm) {
    pio_sm_set_enabled(pio, sm, false);
    pio_sm_unclaim(pio, sm);
}
%}