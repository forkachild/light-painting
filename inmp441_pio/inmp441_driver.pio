.program inmp441_pio
.side_set 2

.define skip_cycles             31
.define din_cycles              24
.define pad_cycles              6

.define public sample_rate      51200
.define public clk_per_sample   64

.wrap_target
; Left word starts
; Only receive data from Left channel
L1:
    nop                 side 0b00   ; LW starts                         WS 0, CLK 0
    nop                 side 0b01   ; 1 cycle skipped                   WS 0, CLK 1
    set x, din_cycles   side 0b00   ; DIN trigger                       WS 0, CLK 0
L2:
    in pins, 1          side 0b01   ; DIN 1-bit (Rising-edge)           WS 0, CLK 1
    jmp x--, L2         side 0b00   ;                                   WS 0, CLK 0
L3:
    set x, pad_cycles   side 0b01   ; 1 cycle skipped                   WS 0, CLK 1
L4:
    nop                 side 0b00   ;                                   WS 0, CLK 0
    jmp x--, L4         side 0b01   ;                                   WS 0, CLK 1

; Right word starts
; Skip the right channel
L5:
    set x, skip_cycles  side 0b10   ; RW starts                         WS 1, CLK 0
L6:
    nop                 side 0b11   ;                                   WS 1, CLK 1
    jmp x--, L6         side 0b10   ; Waste 32 cycles                   WS 1, CLK 0
L7:
    nop                 side 0b11   ;                                   WS 1, CLK 1
.wrap

% c-sdk {
#include "hardware/clocks.h"

static inline void inmp441_pio_program_init(PIO pio, uint sm, uint offset, uint ctrl_pin_start, uint data_pin) {
    pio_gpio_init(pio, ctrl_pin_start);
    pio_sm_set_consecutive_pindirs(pio, sm, ctrl_pin_start, 2, true);

    pio_sm_config c = inmp441_pio_program_get_default_config(offset);
    sm_config_set_sideset_pins(&c, ctrl_pin_start);
    sm_config_set_set_pins(&c, data_pin, 1);
    sm_config_set_in_shift(&c, false, true, 24);

    float div = clock_get_hz(clk_sys) / (inmp441_pio_sample_rate * inmp441_pio_clk_per_sample);
    sm_config_set_clkdiv(&c, div);

    pio_sm_init(pio, sm, offset, &c);
    pio_sm_set_enabled(pio, sm, true);
}

static inline void inmp441_pio_program_deinit(PIO pio, uint sm) {
    pio_sm_set_enabled(pio, sm, false);
    pio_sm_unclaim(pio, sm);
}

%}