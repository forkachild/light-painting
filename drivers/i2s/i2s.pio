; I2S stereo receiver.
; Interleaved L/R samples.
;
;   L starts         L ends  R starts
;  |                      | |
; _                         ________...
;  \_______________________/
; _   _   _   _     _     _   _   _
;  \_/ \_/ \_/ \.../ \.../ \_/ \_/ \...
;
;     |   |         |     |    
;    31  30 samples 7     0 

.program i2s
.side_set 2

; Max clock 6410000
.define public required_clock       6400000
.define public bits_in_per_word     32

frame_l:
    set x, 30           side 0b00   ; L starts
                                    ; L - WS switches on SCK falling edge
data_l:
    in pins, 1          side 0b01   ; L - Sample bit
    jmp x--, data_l     side 0b00   ; L - Loop through bits 0..30
    in pins, 1          side 0b01   ; L - Sample bit 31

frame_r:
    set x, 30           side 0b10   ; Switch to R
                                    ; R - WS switches on SCK falling edge
data_r:
    in pins, 1          side 0b11   ; R - Sample bit
    jmp x--, data_r     side 0b10   ; R - Loop through bits 0..30
    in pins, 1          side 0b11   ; R - Sample bit 31

% c-sdk {
#include "hardware/clocks.h"
#include "hardware/gpio.h"

static inline void i2s_program_init(PIO pio, uint sm, uint offset,
                                            uint sck_pin, uint ws_pin,
                                            uint data_pin) {
    pio_sm_set_pindirs_with_mask(
        pio, sm, (1u << sck_pin) | (1u << ws_pin) | (0u << data_pin),
        (1u << sck_pin) | (1u << ws_pin) | (1u << data_pin));

    pio_gpio_init(pio, data_pin);
    pio_gpio_init(pio, sck_pin);
    pio_gpio_init(pio, ws_pin);

    pio_sm_config cfg = i2s_program_get_default_config(offset);
    
    sm_config_set_clkdiv(&cfg, (float)clock_get_hz(clk_sys) / i2s_required_clock);
    sm_config_set_in_pins(&cfg, data_pin);
    sm_config_set_sideset_pins(&cfg, sck_pin);
    sm_config_set_in_shift(&cfg, false, true, i2s_bits_in_per_word);
    sm_config_set_fifo_join(&cfg, PIO_FIFO_JOIN_RX);

    gpio_set_drive_strength(sck_pin, GPIO_DRIVE_STRENGTH_12MA);
    gpio_set_slew_rate(sck_pin, GPIO_SLEW_RATE_FAST);
    gpio_set_pulls(data_pin, true, true);
    hw_set_bits(&pio->input_sync_bypass, 1u << data_pin);

    pio_sm_init(pio, sm, offset, &cfg);
    pio_sm_set_enabled(pio, sm, true);
}

static inline void i2s_program_deinit(PIO pio, uint sm) {
    pio_sm_set_enabled(pio, sm, false);
    pio_sm_unclaim(pio, sm);
}
%}