; Fully autonomous WS2812 RGB driver
; It keeps transmitting bits as long as the OSR is not empty
; And when it is, it moves to a 50us LO sync pulse and waits
; for more data to transmit

.program neopixel
.side_set 1

.define public baud 10000000

; Check whether the OSR is empty
; If yes, so no more data, continue to transmit a 50us LO sync pulse
; If not, jump to transmitting one bit
transmit:
    out x, 1            side 0          ; 0.6us
    jmp !x, do_zero     side 1          ; 0.3us
do_one:
    jmp transmit        side 1          ; 0.3us
do_zero:
    jmp transmit        side 0          ; 0.3us
public sync:
    set x, (14 - 1)     side 0          ; 0.3us End of transmission
sync_loop:
    jmp x--, sync_loop  side 0 [15 - 1] ; 4.2us (0.3us * 14 * 15 = 63us > 50us) Safe SYNC

% c-sdk {
#include "hardware/clocks.h"

static inline void neopixel_program_init(PIO pio, uint sm, uint offset, uint pin) {
    pio_gpio_init(pio, pin);
    pio_sm_set_consecutive_pindirs(pio, sm, pin, 1, true);

    pio_sm_config c = neopixel_program_get_default_config(offset);
    sm_config_set_sideset_pins(&c, pin);
    sm_config_set_out_shift(&c, false, true, 24);
    sm_config_set_fifo_join(&c, PIO_FIFO_JOIN_TX);
    sm_config_set_clkdiv(&c, 3.f * clock_get_hz(clk_sys) / neopixel_baud);

    gpio_set_slew_rate(pin, GPIO_SLEW_RATE_FAST);
    gpio_set_drive_strength(pin, GPIO_DRIVE_STRENGTH_12MA);

    pio_sm_init(pio, sm, offset, &c);
    pio_sm_set_enabled(pio, sm, true);
}

static inline void neopixel_program_deinit(PIO pio, uint sm) {
    pio_sm_set_enabled(pio, sm, false);
    pio_sm_unclaim(pio, sm);
}
%}