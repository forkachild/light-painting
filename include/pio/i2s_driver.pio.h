// -------------------------------------------------- //
// This file is autogenerated by pioasm; do not edit! //
// -------------------------------------------------- //

#pragma once

#if !PICO_NO_HARDWARE
#include "hardware/pio.h"
#endif

// ------- //
// inmp441 //
// ------- //

#define inmp441_wrap_target 0
#define inmp441_wrap 7

#define inmp441_required_clock 6410000
#define inmp441_bits_in_per_word 32

static const uint16_t inmp441_program_instructions[] = {
            //     .wrap_target
    0xe03e, //  0: set    x, 30           side 0     
    0x4801, //  1: in     pins, 1         side 1     
    0x0041, //  2: jmp    x--, 1          side 0     
    0x5801, //  3: in     pins, 1         side 3     
    0xf03e, //  4: set    x, 30           side 2     
    0xb842, //  5: nop                    side 3     
    0x1045, //  6: jmp    x--, 5          side 2     
    0xa842, //  7: nop                    side 1     
            //     .wrap
};

#if !PICO_NO_HARDWARE
static const struct pio_program inmp441_program = {
    .instructions = inmp441_program_instructions,
    .length = 8,
    .origin = -1,
};

static inline pio_sm_config inmp441_program_get_default_config(uint offset) {
    pio_sm_config c = pio_get_default_sm_config();
    sm_config_set_wrap(&c, offset + inmp441_wrap_target, offset + inmp441_wrap);
    sm_config_set_sideset(&c, 2, false, false);
    return c;
}

#include "hardware/clocks.h"
#include "hardware/gpio.h"
static inline void inmp441_program_init(PIO pio, uint sm, uint offset,
                                            uint sck_pin, uint ws_pin,
                                            uint data_pin) {
    pio_sm_set_pindirs_with_mask(
        pio, sm, (1u << sck_pin) | (1u << ws_pin) | (0u << data_pin),
        (1u << sck_pin) | (1u << ws_pin) | (1u << data_pin));
    pio_gpio_init(pio, sck_pin);
    pio_gpio_init(pio, ws_pin);
    pio_sm_config c = inmp441_program_get_default_config(offset);
    sm_config_set_clkdiv(&c, (float)clock_get_hz(clk_sys) / inmp441_required_clock);
    sm_config_set_in_pins(&c, data_pin);
    sm_config_set_sideset_pins(&c, sck_pin);
    sm_config_set_in_shift(&c, false, true, inmp441_bits_in_per_word);
    sm_config_set_fifo_join(&c, PIO_FIFO_JOIN_RX);
    gpio_set_drive_strength(sck_pin, GPIO_DRIVE_STRENGTH_12MA);
    gpio_set_slew_rate(sck_pin, GPIO_SLEW_RATE_FAST);
    gpio_set_pulls(data_pin, false, true);
    hw_set_bits(&pio->input_sync_bypass, 1u << data_pin);
    pio_sm_init(pio, sm, offset, &c);
    pio_sm_set_enabled(pio, sm, true);
}
static inline void inmp441_program_deinit(PIO pio, uint sm) {
    pio_sm_set_enabled(pio, sm, false);
    pio_sm_unclaim(pio, sm);
}

#endif

