.program ws2812_pio
.side_set 1

; Time unit is 0.1 micro-second
.define T1 3

.define HI 1
.define LO 0

.define public BAUD 10000000

.wrap_target
BITLOOP:
    out x  1       side LO [T1 - 1]  ; 0.3us LOW  => Read next bit, also completes previous bit LOW signal
    jmp !x TX_ZERO side HI [T1 - 1]  ; 0.3us HIGH => Decide jumping to transmitting a "0" or "1"
TX_ONE:
    jmp BITLOOP    side HI [T1 - 1]  ; 0.3us HIGH => Generated pulse = (0.3 + 0.3)us HIGH + 0.3us LOW
TX_ZERO:
    nop            side LO [T1 - 1]  ; 0.3us LOW  => Generated pulse = 0.3us HIGH + (0.3 + 0.3)us LOW
.wrap

% c-sdk {
#include "hardware/clocks.h"
#include <stdio.h>

static inline void ws2812_pio_program_init(PIO pio, uint sm, uint offset, uint pin) {
    pio_gpio_init(pio, pin);
    pio_sm_set_consecutive_pindirs(pio, sm, pin, 1, true);

    pio_sm_config c = ws2812_pio_program_get_default_config(offset);
    sm_config_set_sideset_pins(&c, pin);
    sm_config_set_out_shift(&c, false, true, 24);
    sm_config_set_fifo_join(&c, PIO_FIFO_JOIN_TX);

    float div = (float)clock_get_hz(clk_sys) / ws2812_pio_BAUD;
    sm_config_set_clkdiv(&c, div);

    pio_sm_init(pio, sm, offset, &c);
    pio_sm_set_enabled(pio, sm, true);
}

static inline void ws2812_pio_program_deinit(PIO pio, uint sm) {
    pio_sm_set_enabled(pio, sm, false);
    pio_sm_unclaim(pio, sm);
}
%}