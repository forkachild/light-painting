.program ws2812
.side_set 1

.define public baud 10000000

; Factors of 168
; 1, 2, 3, 4, 6, 7, 8, 12, 14, 21, 24, 28, 42, 56, 84, 168
; = 12 x 14
; = 8 x 21
; = 7 x 24
; = 6 x 28
; = 4 x 42
; = 3 x 56
; = 2 x 84
; = 1 x 168

.wrap_target
entry:
    jmp !osre, tx       side 0          ; 0.3us If we have stuff to transmit, go ahead!
sync:
    set x, (12 - 1)     side 0          ; 0.3us Or else let's start the end of transmission! 50us line lo
sync_loop:
    jmp x--, sync_loop  side 0  [14 - 1] ; 4.2us (x12 times = 50us)

tx:
    out x, 1            side 0          ; 0.3us
    jmp !x, tx_zero     side 1          ; 0.3us
tx_one:
    jmp entry           side 1
tx_zero:
    nop                 side 0          ; 0.3us
.wrap

% c-sdk {
#include "hardware/clocks.h"
#include <stdio.h>

static inline void ws2812_program_init(PIO pio, uint sm, uint offset, uint pin) {
    pio_gpio_init(pio, pin);
    pio_sm_set_consecutive_pindirs(pio, sm, pin, 1, true);

    pio_sm_config c = ws2812_program_get_default_config(offset);
    sm_config_set_sideset_pins(&c, pin);
    sm_config_set_out_shift(&c, false, true, 24);
    sm_config_set_fifo_join(&c, PIO_FIFO_JOIN_TX);
    sm_config_set_clkdiv(&c, 3.f * clock_get_hz(clk_sys) / ws2812_baud);

    pio_sm_init(pio, sm, offset, &c);
    pio_sm_set_enabled(pio, sm, true);
}

static inline void ws2812_program_deinit(PIO pio, uint sm) {
    pio_sm_set_enabled(pio, sm, false);
    pio_sm_unclaim(pio, sm);
}
%}